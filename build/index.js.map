{"version":3,"sources":["../src/index.js"],"names":["driver","url","socketOptions","micro","name","pluginId","errorHandler","plugin","id","middleware","client","__actions","queue","case","args","done","connect","then","on","applyActions","catch","close","Proxy","get","target","property","Object","keys","actions","forEach","key"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,YAA0E;AAAA,iFAAP,EAAO;AAAA,yBAAvEA,MAAuE;AAAA,MAAvEA,MAAuE;AAAA,sBAAtDC,GAAsD;AAAA,MAAtDA,GAAsD;AAAA,MAAzBC,aAAyB;;AACvF,SAAO,UAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAA2B;AAChC,QAAMC,eAAe,4BAAaH,KAAb,CAArB;AACA,QAAMI,SAAS,EAAEH,UAAF,EAAQI,IAAIH,QAAZ,EAAsBI,6BAAtB,EAAkCC,QAAQ,IAA1C,EAAf;AACA,QAAMC,YAAY,EAAlB;;AAEAR,UACGS,KADH,CACS;AACLC,YAAM,MADD;AAELC,YAAM,EAFD;AAGLC,YAAM;AAAA,eAAM,kBACTC,OADS,CACDf,GADC,eACSC,aADT,GAETe,IAFS,CAEJ;AAAA,iBAAWV,OAAOG,MAAP,GAAgBM,QAAQE,EAAR,CAAW,OAAX,EAAoBZ,YAApB,CAA3B;AAAA,SAFI,EAGTW,IAHS,CAGJE,aAAahB,KAAb,EAAoBQ,SAApB,CAHI,EAITS,KAJS,CAIHd,YAJG,CAAN;AAAA;AAHD,KADT,EAUGM,KAVH,CAUS;AACLC,YAAM,OADD;AAELC,YAAM,EAFD;AAGLC,YAAM;AAAA,eAAMR,OAAOG,MAAP,CAAcW,KAAd,GAAsBD,KAAtB,CAA4Bd,YAA5B,CAAN;AAAA;AAHD,KAVT;;AAgBA,WAAO,IAAIgB,KAAJ,CAAUf,MAAV,EAAkB;AACvBgB,SADuB,eACnBC,MADmB,EACXC,QADW,EACD;AACpB,YAAIA,YAAYD,MAAhB,EAAwB;AACtB,iBAAOA,OAAQC,QAAR,CAAP;AACD;;AAED,YAAIA,YAAYd,SAAhB,EAA2B;AACzB,iBAAOA,UAAWc,QAAX,CAAP;AACD;;AAED,eAAOlB,OAAOG,MAAP,CAAee,QAAf,CAAP;AACD;AAXsB,KAAlB,CAAP;AAaD,GAlCD;AAmCD,C;;AAED,SAASN,YAAT,CAAsBhB,KAAtB,EAA6BQ,SAA7B,EAAwC;AACtC,SAAO;AAAA,WAAUe,OACdC,IADc,CACTC,OADS,EAEdC,OAFc,CAEN,eAAO;AACd,UAAI,sBAAWD,QAASE,GAAT,CAAX,CAAJ,EAAgC;AAC9BnB,kBAAWmB,GAAX,IAAmBF,QAASE,GAAT,EAAe3B,KAAf,EAAsBO,MAAtB,EAA8BC,SAA9B,CAAnB;AACD,OAFD,MAEO;AACLA,kBAAWmB,GAAX,IAAmBF,QAASE,GAAT,CAAnB;AACD;AACF,KARc,CAAV;AAAA,GAAP;AASD","file":"index.js","sourcesContent":["import middleware from \"amqplib\";\nimport isFunction from \"lodash.isfunction\";\nimport ErrorHandler from \"./utils/error-handler\";\nimport { DRIVER, QUEUE_OPTIONS_HOST } from './constants';\n\nexport default ({ driver = DRIVER, url = QUEUE_OPTIONS_HOST, ...socketOptions } = {}) => {\n  return (micro, name, pluginId) => {\n    const errorHandler = ErrorHandler(micro);\n    const plugin = { name, id: pluginId, middleware, client: null };\n    const __actions = {};\n\n    micro\n      .queue({\n        case: 'wait',\n        args: [],\n        done: () => middleware\n          .connect(url, { ...socketOptions })\n          .then(connect => plugin.client = connect.on('error', errorHandler))\n          .then(applyActions(micro, __actions))\n          .catch(errorHandler)\n      })\n      .queue({\n        case: 'close',\n        args: [],\n        done: () => plugin.client.close().catch(errorHandler)\n      });\n\n    return new Proxy(plugin, {\n      get(target, property) {\n        if (property in target) {\n          return target[ property ];\n        }\n\n        if (property in __actions) {\n          return __actions[ property ];\n        }\n\n        return plugin.client[ property ];\n      }\n    })\n  };\n}\n\nfunction applyActions(micro, __actions) {\n  return client => Object\n    .keys(actions)\n    .forEach(key => {\n      if (isFunction(actions[ key ])) {\n        __actions[ key ] = actions[ key ](micro, client, __actions)\n      } else {\n        __actions[ key ] = actions[ key ];\n      }\n    })\n}"]}