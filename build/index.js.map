{"version":3,"sources":["../src/index.js"],"names":["DRIVER","driver","url","timeout","socketOptions","micro","name","pluginId","plugin","id","connectStack","client","queue","case","args","done","connect","then","on","errorCallback","Promise","all","map","resolve","catch","error","reject","close","middleware","push","logger","code","message","toString"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;kBAEe,YAAiF;AAAA,iFAAP,EAAO;AAAA,MAAvEA,MAAuE,QAA9EC,MAA8E;AAAA,sBAA/DC,GAA+D;AAAA,MAA/DA,GAA+D;AAAA,MAArCC,OAAqC,QAArCA,OAAqC;AAAA,MAAzBC,aAAyB;;AAC9F,SAAO,UAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAA2B;AAChC,QAAMC,SAAS,EAAEF,UAAF,EAAQG,IAAIF,QAAZ,EAAf;AACA,QAAIG,eAAe,EAAnB;AACA,QAAIC,gBAAJ;;AAEAN,UACGO,KADH,CACS;AACLC,YAAM,MADD;AAELC,YAAM,EAFD;AAGLC,YAAM;AAAA,eAAM,kBAAWC,OAAX,CAAmBd,GAAnB,eAA6BE,aAA7B,GACTa,IADS,CACJ,mBAAW;AACfN,oBAASK,QACNE,EADM,CACH,OADG,EACMC,cAAcd,KAAd,CADN,CAAT;;AAGA,iBAAOe,QACJC,GADI,CACAX,aAAaY,GAAb,CAAiB;AAAA;AAAA,gBAAEC,OAAF;;AAAA,mBAAeA,QAAQZ,OAAR,CAAf;AAAA,WAAjB,CADA,EAEJM,IAFI,CAEC;AAAA,mBAAMP,eAAe,EAArB;AAAA,WAFD,EAGJO,IAHI,CAGC;AAAA,mBAAMD,OAAN;AAAA,WAHD,CAAP;AAID,SATS,EAUTQ,KAVS,CAUH,iBAAS;AACdL,wBAAcd,KAAd,EAAqBoB,KAArB;AACA,iBAAOL,QACJC,GADI,CACAX,aAAaY,GAAb,CAAiB;AAAA;AAAA,gBAAGI,MAAH;;AAAA,mBAAeA,OAAOD,KAAP,CAAf;AAAA,WAAjB,CADA,EAEJR,IAFI,CAEC;AAAA,mBAAMP,eAAe,EAArB;AAAA,WAFD,EAGJO,IAHI,CAGC;AAAA,mBAAMG,QAAQM,MAAR,CAAeD,KAAf,CAAN;AAAA,WAHD,CAAP;AAID,SAhBS,CAAN;AAAA;AAHD,KADT,EAsBGb,KAtBH,CAsBS;AACLC,YAAM,OADD;AAELC,YAAM,EAFD;AAGLC,YAAM;AAAA,eAAMJ,QAAOgB,KAAP,GAAeH,KAAf,CAAqBL,cAAcd,KAAd,CAArB,CAAN;AAAA;AAHD,KAtBT;;AA4BA,WAAO;AACLuB,mCADK;AAELjB,cAAQ,kBAAM;AACZ,YAAI,CAAC,CAACA,OAAN,EAAc;AACZ,iBAAOS,QAAQG,OAAR,CAAgBZ,OAAhB,CAAP;AACD;;AAED,eAAO,IAAIS,OAAJ,CAAY,UAACG,OAAD,EAAUG,MAAV;AAAA,iBAAqBhB,aAAamB,IAAb,CAAkB,CAAEN,OAAF,EAAWG,MAAX,CAAlB,CAArB;AAAA,SAAZ,CAAP;AACD;AARI,KAAP;AAUD,GA3CD;AA4CD,C;;AACD,SAASP,aAAT,CAAuBd,KAAvB,EAA8B;AAC5B,SAAO,iBAAS;AACd,QAAI,CAAC,CAACoB,KAAN,EAAa;AACXpB,YAAMyB,MAAN,CAAaL,KAAb,CAAmB,mCAAnB,EAAwD;AACtDM,4CAAsCN,MAAMM,IADU;AAEtDC,iBAASP,MAAMO,OAAN,CAAcC,QAAd;AAF6C,OAAxD;AAID;AACF,GAPD;AAQD","file":"index.js","sourcesContent":["import middleware from \"amqplib\";\nimport { DRIVER, QUEUE_OPTIONS_HOST } from './constants';\n\nexport default ({ driver:DRIVER, url = QUEUE_OPTIONS_HOST, timeout, ...socketOptions } = {}) => {\n  return (micro, name, pluginId) => {\n    const plugin = { name, id: pluginId };\n    let connectStack = [];\n    let client;\n\n    micro\n      .queue({\n        case: 'wait',\n        args: [],\n        done: () => middleware.connect(url, { ...socketOptions })\n          .then(connect => {\n            client = connect\n              .on('error', errorCallback(micro));\n\n            return Promise\n              .all(connectStack.map(([resolve]) => resolve(client)))\n              .then(() => connectStack = [])\n              .then(() => connect);\n          })\n          .catch(error => {\n            errorCallback(micro)(error);\n            return Promise\n              .all(connectStack.map(([,reject]) => reject(error)))\n              .then(() => connectStack = [])\n              .then(() => Promise.reject(error));\n          })\n      })\n      .queue({\n        case: 'close',\n        args: [],\n        done: () => client.close().catch(errorCallback(micro))\n      });\n\n    return {\n      middleware,\n      client: () => {\n        if (!!client) {\n          return Promise.resolve(client)\n        }\n\n        return new Promise((resolve, reject) => connectStack.push([ resolve, reject ]));\n      }\n    }\n  };\n}\nfunction errorCallback(micro) {\n  return error => {\n    if (!!error) {\n      micro.logger.error('The server refused the connection', {\n        code   : `error.plugin-cache-redis/${ error.code }`,\n        message: error.message.toString()\n      })\n    }\n  }\n}"]}